import { HttpClient } from '@angular/common/http';
import { Inject, Injectable } from '@angular/core';
import { getKeyFromModel } from '@briebug/ngrx-auto-entity';
import { first, from, of, switchMap } from 'rxjs';
import { map } from 'rxjs/operators';
import { buildUrl, resolveRetryCriteria } from './entity.service.utils';
import { AUTO_ENTITY_CONFIG } from './config';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class EntityService {
    constructor(http, config) {
        this.http = http;
        this.config = config;
    }
    getUrlPrefix(operation, info, criteria) {
        return typeof this.config.urlPrefix === 'string' ? of(this.config.urlPrefix) : from(this.config.urlPrefix(operation, info, criteria));
    }
    buildUrl(operation, info, criteria, key) {
        return this.getUrlPrefix('load', info, criteria).pipe(first(), map(prefix => buildUrl(prefix, info, criteria, key)));
    }
    load(entityInfo, key, criteria) {
        return this.buildUrl('load', entityInfo, criteria, key).pipe(switchMap(url => resolveRetryCriteria(this.http.get(url), criteria?.retry, this.config.defaultRetry)));
    }
    loadMany(entityInfo, criteria) {
        return this.buildUrl('loadMany', entityInfo, criteria).pipe(switchMap(url => resolveRetryCriteria(this.http.get(url), criteria?.retry, this.config.defaultRetry)));
    }
    loadAll(entityInfo, criteria) {
        return this.buildUrl('loadAll', entityInfo, criteria).pipe(switchMap(url => resolveRetryCriteria(this.http.get(url), criteria?.retry, this.config.defaultRetry)));
    }
    create(entityInfo, entity, criteria, originalEntity) {
        return this.buildUrl('create', entityInfo, criteria).pipe(switchMap(url => this.http.post(url, entity)));
    }
    update(entityInfo, entity, criteria, originalEntity) {
        return this.buildUrl('update', entityInfo, criteria, getKeyFromModel(entityInfo.modelType, entity)).pipe(switchMap(url => this.http.patch(url, entity)));
    }
    replace(entityInfo, entity, criteria, originalEntity) {
        return this.buildUrl('replace', entityInfo, criteria, getKeyFromModel(entityInfo.modelType, entity)).pipe(switchMap(url => this.http.put(url, entity)));
    }
    delete(entityInfo, entity, criteria, originalEntity) {
        return this.buildUrl('delete', entityInfo, criteria, getKeyFromModel(entityInfo.modelType, entity)).pipe(switchMap(url => this.http.delete(url, entity).pipe(map(() => entity))));
    }
    deleteByKey(entityInfo, key, criteria) {
        return this.buildUrl('deleteByKey', entityInfo, criteria, key).pipe(switchMap(url => this.http.delete(url).pipe(map(() => key))));
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: EntityService, deps: [{ token: i1.HttpClient }, { token: AUTO_ENTITY_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable }); }
    /** @nocollapse */ static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: EntityService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: EntityService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [AUTO_ENTITY_CONFIG]
                }] }] });
//# sourceMappingURL=data:application/json;base64,